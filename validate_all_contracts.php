<?php
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ Bitrix24 –∏ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
 */

require_once('Bitrix24Rest.php');
require_once('Config.php');
require_once('ProjectMapping.php');

Config::load();

// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
$projectName = $_GET['project'] ?? 'Dubai';
$projectConfig = ProjectMapping::getProjectConfig($projectName);

define('WEBHOOK_URL', $projectConfig['webhook_url']);

class ContractValidator {
    private $bitrix;
    private $validatorUrl;

    public function __construct() {
        $this->bitrix = new Bitrix24Rest(WEBHOOK_URL);
        $this->validatorUrl = 'https://alma.colifeb24apps.ru/validate_sync.php';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–∑ Bitrix24
     */
    public function getAllContracts($limit = null) {
        echo "üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ Bitrix24...\n";
        
        $contracts = [];
        $start = 0;
        $batchSize = 50; // Bitrix24 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –Ω–µ –±–æ–ª–µ–µ 50 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ —Ä–∞–∑
        
        while (true) {
            $response = $this->bitrix->call('crm.item.list', [
                'entityTypeId' => 183, // –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                'select' => ['id', 'title', 'ufCrm20_1693919019'], // –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                'start' => $start,
                'order' => ['id' => 'DESC'] // –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
            ]);

            if (!isset($response['result']['items']) || empty($response['result']['items'])) {
                break;
            }

            foreach ($response['result']['items'] as $contract) {
                $contracts[] = [
                    'id' => $contract['id'],
                    'title' => $contract['title'],
                    'unit_external_id' => $contract['ufCrm20_1693919019'] ?? ''
                ];
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–∏–º–∏—Ç
                if ($limit && count($contracts) >= $limit) {
                    break 2;
                }
            }

            $start += $batchSize;
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (count($response['result']['items']) < $batchSize) {
                break;
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            usleep(100000); // 0.1 —Å–µ–∫—É–Ω–¥—ã
        }

        echo "üìä –ù–∞–π–¥–µ–Ω–æ " . count($contracts) . " –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Bitrix24\n\n";
        return $contracts;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
     */
    public function validateContract($contractId) {
        $url = $this->validatorUrl . "?id=" . urlencode($contractId);
        
        $ch = curl_init();
        curl_setopt_array($ch, [
            CURLOPT_URL => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_SSL_VERIFYPEER => false
        ]);

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        if ($httpCode !== 200) {
            return [
                'success' => false,
                'error' => "HTTP $httpCode: $response"
            ];
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (—É–±–∏—Ä–∞–µ–º echo —Å–æ–æ–±—â–µ–Ω–∏—è)
        $jsonStart = strpos($response, '{');
        if ($jsonStart === false) {
            return [
                'success' => false,
                'error' => "No JSON found in response: " . substr($response, 0, 200)
            ];
        }
        
        $jsonResponse = substr($response, $jsonStart);
        $decoded = json_decode($jsonResponse, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            return [
                'success' => false,
                'error' => "JSON decode error: " . json_last_error_msg() . " Response: " . substr($jsonResponse, 0, 200)
            ];
        }

        return $decoded;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
     */
    public function validateAllContracts($limit = null) {
        echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...\n\n";

        $contracts = $this->getAllContracts($limit);
        
        if (empty($contracts)) {
            echo "‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n";
            return;
        }

        $stats = [
            'total' => count($contracts),
            'success' => 0,
            'errors' => 0,
            'title_mismatch' => 0,
            'external_id_mismatch' => 0,
            'additional_external_id_mismatch' => 0,
            'is_used_additional_external_id_incorrect' => 0,
            'not_found' => 0,
            'bitrix_errors' => 0
        ];

        $errors = [];
        $warnings = [];

        foreach ($contracts as $contract) {
            $contractId = $contract['id'];
            echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç $contractId: {$contract['title']}\n";

            $result = $this->validateContract($contractId);
            
            if (!$result['success']) {
                $stats['errors']++;
                $stats['not_found']++;
                $errors[] = [
                    'contract_id' => $contractId,
                    'title' => $contract['title'],
                    'error' => $result['error']
                ];
                echo "  ‚ùå {$result['error']}\n";
            } else {
                $stats['success']++;
                $validation = $result['validation'];
                
                $issues = [];
                if (!$validation['title_match']) {
                    $issues[] = "–Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç";
                    $stats['title_mismatch']++;
                }
                if (!$validation['external_id_match']) {
                    $issues[] = "external_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç";
                    $stats['external_id_mismatch']++;
                }
                if (!$validation['additional_external_id_match']) {
                    $issues[] = "additional_external_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç";
                    $stats['additional_external_id_mismatch']++;
                }
                if (!$validation['is_used_additional_external_id_correct']) {
                    $issues[] = "is_used_additional_external_id –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ";
                    $stats['is_used_additional_external_id_incorrect']++;
                }

                if (empty($issues)) {
                    echo "  ‚úÖ OK\n";
                } else {
                    echo "  ‚ö†Ô∏è  " . implode(', ', $issues) . "\n";
                    $warnings[] = [
                        'contract_id' => $contractId,
                        'title' => $contract['title'],
                        'issues' => $issues,
                        'bitrix' => $result['bitrix'],
                        'alma' => $result['alma']
                    ];
                }
            }

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            usleep(100000); // 0.1 —Å–µ–∫—É–Ω–¥—ã
        }

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        echo "\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n";
        echo "   –í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {$stats['total']}\n";
        echo "   –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {$stats['success']}\n";
        echo "   –û—à–∏–±–æ–∫: {$stats['errors']}\n";
        echo "   –ù–∞–∑–≤–∞–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {$stats['title_mismatch']}\n";
        echo "   External ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {$stats['external_id_mismatch']}\n";
        echo "   Additional External ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {$stats['additional_external_id_mismatch']}\n";
        echo "   is_used_additional_external_id –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {$stats['is_used_additional_external_id_incorrect']}\n";

        // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏
        if (!empty($errors)) {
            echo "\n‚ùå –û—à–∏–±–∫–∏ (–ø–µ—Ä–≤—ã–µ 10):\n";
            foreach (array_slice($errors, 0, 10) as $error) {
                echo "   - –ö–æ–Ω—Ç—Ä–∞–∫—Ç {$error['contract_id']}: {$error['title']} - {$error['error']}\n";
            }
            if (count($errors) > 10) {
                echo "   ... –∏ –µ—â–µ " . (count($errors) - 10) . " –æ—à–∏–±–æ–∫\n";
            }
        }

        // –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if (!empty($warnings)) {
            echo "\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 10):\n";
            foreach (array_slice($warnings, 0, 10) as $warning) {
                echo "   - –ö–æ–Ω—Ç—Ä–∞–∫—Ç {$warning['contract_id']}: {$warning['title']}\n";
                echo "     –ü—Ä–æ–±–ª–µ–º—ã: " . implode(', ', $warning['issues']) . "\n";
                if (isset($warning['bitrix']['rent_type'])) {
                    echo "     Bitrix rent_type: {$warning['bitrix']['rent_type']} ({$warning['bitrix']['rent_type_value']})\n";
                }
                echo "     Alma is_used_additional_external_id: " . ($warning['alma']['is_used_additional_external_id'] ? 'true' : 'false') . "\n";
            }
            if (count($warnings) > 10) {
                echo "   ... –∏ –µ—â–µ " . (count($warnings) - 10) . " –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n";
            }
        }

        return [
            'stats' => $stats,
            'errors' => $errors,
            'warnings' => $warnings
        ];
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
$validator = new ContractValidator();
$limit = isset($_GET['limit']) ? (int)$_GET['limit'] : null;

if ($limit) {
    echo "üî¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ $limit –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤\n\n";
}

$result = $validator->validateAllContracts($limit);
?>
